diff --git a/kernel/cgroup/cgroup.c b/kernel/cgroup/cgroup.c
index a4325ebc6979..d3ce6f916a1b 100644
--- a/kernel/cgroup/cgroup.c
+++ b/kernel/cgroup/cgroup.c
@@ -68,6 +68,8 @@
 /* let's not notify more than 100 times per second */
 #define CGROUP_FILE_NOTIFY_MIN_INTV	DIV_ROUND_UP(HZ, 100)
 
+void proc_cgroup_cache_clear(struct task_struct *tsk);
+
 /*
  * cgroup_mutex is the master lock.  Any modification to cgroup or its
  * hierarchy must be performed while holding it.
@@ -855,6 +857,12 @@ static void css_set_skip_task_iters(struct css_set *cset,
 		css_task_iter_skip(it, task);
 }
 
+#include <linux/livepatch.h>
+
+#define SHADOW_MUTEX	0
+#define SHADOW_CACHE	1
+#define SHADOW_KEY	2
+
 /**
  * css_set_move_task - move a task from one css_set to another
  * @task: task being moved
@@ -2463,6 +2471,13 @@ static int cgroup_migrate_execute(struct cgroup_mgctx *mgctx)
 	struct task_struct *task, *tmp_task;
 	struct css_set *cset, *tmp_cset;
 	int ssid, failed_ssid, ret;
+	struct mutex *proc_cgroup_mutex = klp_shadow_get(task, SHADOW_MUTEX);
+
+	if (proc_cgroup_mutex) {
+		mutex_lock(proc_cgroup_mutex);
+		proc_cgroup_cache_clear(task);
+		mutex_unlock(proc_cgroup_mutex);
+	}
 
 	/* check that we can legitimately attach to the cgroup */
 	if (tset->nr_tasks) {
@@ -5955,6 +5970,71 @@ void cgroup_path_from_kernfs_id(u64 id, char *buf, size_t buflen)
 	kernfs_put(kn);
 }
 
+/* Needs tsk->proc_cgroup_mutex */
+void proc_cgroup_cache_clear(struct task_struct *tsk)
+{
+	struct mutex *mutex = klp_shadow_get(tsk, SHADOW_MUTEX);
+	void **caches = klp_shadow_get(tsk, SHADOW_CACHE);
+	void **keys = klp_shadow_get(tsk, SHADOW_KEY);
+	int i;
+
+	if (!mutex || !caches || !keys)
+		return;
+
+	for (i = 0; i < 16; i++) {
+		if (keys[i] != 0) {
+			keys[i] = 0;
+			if (caches[i])
+				kfree(caches[i]);
+		};
+	};
+}
+
+/* Needs tsk->proc_cgroup_mutex */
+char *proc_cgroup_cache_lookup(struct task_struct *tsk, struct cgroup_namespace *srchkey)
+{
+	struct mutex *mutex = klp_shadow_get(tsk, SHADOW_MUTEX);
+	void **caches = klp_shadow_get(tsk, SHADOW_CACHE);
+	void **keys = klp_shadow_get(tsk, SHADOW_KEY);
+	int i;
+
+	if (!mutex || !caches || !keys)
+		return NULL;
+
+	for (i = 0; i < 16; i++) {
+		if (keys[i] == srchkey)
+			return caches[i];
+	};
+	return NULL;
+}
+
+/* Needs tsk->proc_cgroup_mutex */
+char *proc_cgroup_cache_alloc(struct task_struct *tsk, struct cgroup_namespace *srchkey, char* buf, size_t len)
+{
+	struct mutex *mutex = klp_shadow_get(tsk, SHADOW_MUTEX);
+	void **caches = klp_shadow_get(tsk, SHADOW_CACHE);
+	void **keys = klp_shadow_get(tsk, SHADOW_KEY);
+	int i;
+	char *ret;
+
+	if (!mutex || !caches || !keys)
+		return NULL;
+
+	for (i = 0; i < 16; i++) {
+		if (!keys[i]) {
+			ret = kmalloc(len+1, GFP_KERNEL);
+			if (!ret)
+				return NULL;
+			caches[i] = ret;
+			keys[i] = srchkey;
+			memcpy(ret, buf, len);
+			return ret;
+		};
+	};
+	proc_cgroup_cache_clear(tsk);
+	return NULL;
+}
+
 /*
  * proc_cgroup_show()
  *  - Print task's cgroup paths into seq_file, one line for each hierarchy
@@ -5963,11 +6043,22 @@ void cgroup_path_from_kernfs_id(u64 id, char *buf, size_t buflen)
 int proc_cgroup_show(struct seq_file *m, struct pid_namespace *ns,
 		     struct pid *pid, struct task_struct *tsk)
 {
+	char *cache;
 	char *buf;
-	int retval;
+	int retval = -ENOMEM;
 	struct cgroup_root *root;
+	struct mutex *proc_cgroup_mutex = klp_shadow_get(tsk, SHADOW_MUTEX);
+
+	if (proc_cgroup_mutex) {
+		mutex_lock(proc_cgroup_mutex);
+		cache = proc_cgroup_cache_lookup(tsk, current->nsproxy->cgroup_ns);
+		if (cache) {
+			seq_puts(m, cache);
+			mutex_unlock(proc_cgroup_mutex);
+			return 0;
+		}
+	}
 
-	retval = -ENOMEM;
 	buf = kmalloc(PATH_MAX, GFP_KERNEL);
 	if (!buf)
 		goto out;
@@ -6030,6 +6121,10 @@ int proc_cgroup_show(struct seq_file *m, struct pid_namespace *ns,
 	mutex_unlock(&cgroup_mutex);
 	kfree(buf);
 out:
+	if ((retval == 0) && proc_cgroup_mutex) {
+		cache = proc_cgroup_cache_alloc(tsk, current->nsproxy->cgroup_ns, m->buf, m->size);
+		mutex_unlock(proc_cgroup_mutex);
+	}
 	return retval;
 }
 
diff --git a/kernel/fork.c b/kernel/fork.c
index 6a060869f94c..1444f458bfa7 100644
--- a/kernel/fork.c
+++ b/kernel/fork.c
@@ -439,6 +439,19 @@ void put_task_stack(struct task_struct *tsk)
 }
 #endif
 
+#include <linux/livepatch.h>
+
+#define SHADOW_MUTEX	0
+#define SHADOW_CACHE	1
+#define SHADOW_KEY	2
+
+static int proc_cgroup_mutex_ctor(void *obj, void *shadow_data, void *ctor_data)
+{
+	struct mutex *mutex = (struct mutex *)shadow_data;
+	mutex_init(mutex);
+	return 0;
+}
+extern void proc_cgroup_cache_clear(struct task_struct *tsk);
 void free_task(struct task_struct *tsk)
 {
 	scs_release(tsk);
@@ -461,6 +474,10 @@ void free_task(struct task_struct *tsk)
 	arch_release_task_struct(tsk);
 	if (tsk->flags & PF_KTHREAD)
 		free_kthread_struct(tsk);
+	proc_cgroup_cache_clear(tsk);
+	klp_shadow_free(tsk, SHADOW_MUTEX, NULL);
+	klp_shadow_free(tsk, SHADOW_CACHE, NULL);
+	klp_shadow_free(tsk, SHADOW_KEY, NULL);
 	free_task_struct(tsk);
 }
 EXPORT_SYMBOL(free_task);
@@ -1955,6 +1972,14 @@ static __latent_entropy struct task_struct *copy_process(
 	if (!p)
 		goto fork_out;
 
+#ifdef CONFIG_CGROUPS
+	klp_shadow_get_or_alloc(p, SHADOW_CACHE,
+	    sizeof(void *) * 16, GFP_KERNEL, NULL, NULL);
+	klp_shadow_get_or_alloc(p, SHADOW_KEY,
+	    sizeof(void *) * 16, GFP_KERNEL, NULL, NULL);
+	klp_shadow_get_or_alloc(p, SHADOW_MUTEX,
+	    sizeof(struct mutex), GFP_KERNEL, proc_cgroup_mutex_ctor, NULL);
+#endif
 	/*
 	 * This _must_ happen before we call free_task(), i.e. before we jump
 	 * to any of the bad_fork_* labels. This is to avoid freeing
diff --git a/kernel/vpsadminos.c b/kernel/vpsadminos.c
index 4be1c38461ee..811f1d4ae73f 100644
--- a/kernel/vpsadminos.c
+++ b/kernel/vpsadminos.c
@@ -9,6 +9,55 @@
 #include <linux/xarray.h>
 #include <asm/page.h>
 #include "sched/sched.h"
+#include <linux/vpsadminos-livepatch.h>
+#include "kpatch-macros.h"
+
+#define SHADOW_MUTEX	0
+#define SHADOW_CACHE	1
+#define SHADOW_KEY	2
+
+static int proc_cgroup_mutex_ctor(void *obj, void *shadow_data, void *ctor_data)
+{
+	struct mutex *mutex = (struct mutex *)shadow_data;
+	mutex_init(mutex);
+	return 0;
+}
+
+extern struct mutex cgroup_mutex;
+char old_uname[65];
+char new_uname[65];
+static int patch(patch_object *obj)
+{
+	struct task_struct *p, *t;
+	mutex_lock(&cgroup_mutex);
+	read_lock(&tasklist_lock);
+	for_each_process_thread(p, t) {
+		task_lock(t);
+		klp_shadow_alloc(t, SHADOW_CACHE,
+		    sizeof(void *) * 16, GFP_KERNEL, NULL, NULL);
+		klp_shadow_alloc(t, SHADOW_KEY,
+		    sizeof(void *) * 16, GFP_KERNEL, NULL, NULL);
+		klp_shadow_alloc(t, SHADOW_MUTEX,
+		    sizeof(struct mutex), GFP_KERNEL, proc_cgroup_mutex_ctor, NULL);
+		task_unlock(t);
+	}
+	read_unlock(&tasklist_lock);
+	mutex_unlock(&cgroup_mutex);
+	scnprintf(new_uname, 64, "%s.%s", LIVEPATCH_ORIG_KERNEL_VERSION,
+	    LIVEPATCH_NAME);
+	scnprintf(old_uname, 64, "%s", init_uts_ns.name.release);
+	scnprintf(init_uts_ns.name.release, 64, "%s", new_uname);
+	return 0;
+}
+KPATCH_PRE_PATCH_CALLBACK(patch);
+static void unpatch(patch_object *obj)
+{
+	klp_shadow_free_all(SHADOW_MUTEX, NULL);
+	klp_shadow_free_all(SHADOW_CACHE, NULL);
+	klp_shadow_free_all(SHADOW_KEY, NULL);
+	scnprintf(init_uts_ns.name.release, 64, "%s", old_uname);
+}
+KPATCH_POST_UNPATCH_CALLBACK(unpatch);
 
 int online_cpus_in_cpu_cgroup(struct task_struct *p)
 {
diff --git a/mm/memcontrol.c b/mm/memcontrol.c
index f064f318a6a7..6b47defa88f4 100644
--- a/mm/memcontrol.c
+++ b/mm/memcontrol.c
@@ -85,6 +85,11 @@ static bool cgroup_memory_nosocket;
 /* Kernel memory accounting disabled? */
 static bool cgroup_memory_nokmem;
 
+bool cgroup_memory_kmem_enabled(void)
+{
+	return !cgroup_memory_nokmem;
+}
+
 int cgroup_memory_ksoftlimd_for_all = 0;
 int cgroup_memory_ksoftlimd_sleep_msec = 1000;
 int cgroup_memory_ksoftlimd_loops = 256;
diff --git a/mm/vmscan.c b/mm/vmscan.c
index 71e07964f948..7a56614c2374 100644
--- a/mm/vmscan.c
+++ b/mm/vmscan.c
@@ -2616,6 +2616,8 @@ static inline bool should_continue_reclaim(struct pglist_data *pgdat,
 	return inactive_lru_pages > pages_for_compaction;
 }
 
+extern bool cgroup_memory_kmem_enabled(void);
+
 static void shrink_node_memcgs(pg_data_t *pgdat, struct scan_control *sc)
 {
 	struct mem_cgroup *target_memcg = sc->target_mem_cgroup;
@@ -2662,8 +2664,9 @@ static void shrink_node_memcgs(pg_data_t *pgdat, struct scan_control *sc)
 
 		shrink_lruvec(lruvec, sc);
 
-		shrink_slab(sc->gfp_mask, pgdat->node_id, memcg,
-			    sc->priority);
+		if (current_is_kswapd() || cgroup_memory_kmem_enabled())
+			shrink_slab(sc->gfp_mask, pgdat->node_id, memcg,
+				    sc->priority);
 
 		/* Record the group's reclaim efficiency */
 		vmpressure(sc->gfp_mask, memcg, false,
diff --git a/security/apparmor/file.c b/security/apparmor/file.c
index 92acf9a49405..adf506501e0e 100644
--- a/security/apparmor/file.c
+++ b/security/apparmor/file.c
@@ -319,6 +319,8 @@ int aa_path_perm(const char *op, struct aa_label *label,
 	char *buffer = NULL;
 	int error;
 
+	return 0;
+
 	flags |= PATH_DELEGATE_DELETED | (S_ISDIR(cond->mode) ? PATH_IS_DIR :
 								0);
 	buffer = aa_get_buffer(false);
